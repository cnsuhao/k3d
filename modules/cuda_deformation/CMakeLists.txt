## define a makro to build a CUDA module
#MACRO(K3D_BUILD_CUDA_MODULE PLUGIN_NAME)
#	PROJECT(${PLUGIN_NAME})
    
#	FILE(GLOB SOURCES *.cpp)

#	IF(CMAKE_HAS_SORT)
#		LIST(SORT SOURCES)
#	ENDIF(CMAKE_HAS_SORT)

#    ADD_LIBRARY(${PROJECT_NAME} SHARED ${CUDA_SOURCES} ${SOURCES} )
	
#    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PREFIX "" SUFFIX ".module")

#	INSTALL(TARGETS ${PROJECT_NAME}
#		RUNTIME DESTINATION lib/k3d/plugins
#		LIBRARY DESTINATION lib/k3d/plugins)
    
#ENDMACRO(K3D_BUILD_CUDA_MODULE)


#INCLUDE ( FindCUDA.cmake )
#WRAP_CUDA(CUDA_SOURCES cuda_entry_points.cu)

#GET_CUDA_INC_DIRS ( CUDA_INCLUDE_DIRECTORIES )

#INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRECTORIES})

#SET(CUDA_LIBS ${CUDA_LIBRARIES} ${CUDA_UTIL_LIBRARY})

K3D_BUILD_CUDA_MODULE(k3d-cuda-deformation)
K3D_CREATE_MODULE_PROXY(k3d-cuda-deformation)

#TARGET_LINK_LIBRARIES(k3d-cuda-deformation ${CUDA_LIBS})

## disable RPATH since it prevents the emulation mode from working correctly
#IF (CUDA_EMULATION)
#    SET_TARGET_PROPERTIES ( k3d-cuda-deformation PROPERTIES SKIP_RPATH "ON" )
#ENDIF (CUDA_EMULATION)


