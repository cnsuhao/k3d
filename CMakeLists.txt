PROJECT(k3d)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4 FATAL_ERROR)

SET(CMAKE_HAS_SORT 1)
IF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 4 AND CMAKE_PATCH_VERSION LESS 4)
	SET(CMAKE_HAS_SORT 0)
ENDIF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 4 AND CMAKE_PATCH_VERSION LESS 4)

# where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

# Disallow in-source builds
INCLUDE(K3DOutOfSourceBuild)
# Convenience macro for linking Win32 DLLs with MSVC
INCLUDE(K3DGenerateDEF)

# Set the K-3D version
SET(MAJOR_VERSION 0)
SET(MINOR_VERSION 7)
SET(RELEASE_VERSION 0)
SET(BUILD_VERSION 0)

SET(PACKAGE k3d)
SET(VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${RELEASE_VERSION}.${BUILD_VERSION})
SET(host ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR})
SET(COPYRIGHT "Copyright (c) 1995-2007, Timothy M. Shead.  All Rights Reserved.")
SET(prefix ${CMAKE_INSTALL_PREFIX})

# Setup testing
INCLUDE(CTest)
ENABLE_TESTING()
MARK_AS_ADVANCED(BUILD_TESTING)
MARK_AS_ADVANCED(DART_TESTING_TIMEOUT)

# Detect 32/64 bit platform type
MESSAGE(STATUS "checking the width of std::vector<>::size_type for this platform")

TRY_RUN(
	K3D_PLATFORM_SIZE_TYPE
	K3D_PLATFORM_SIZE_TYPE_COMPILE
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/configuration/size_type.cpp)

MESSAGE(STATUS "  std::vector<>::size_type is ${K3D_PLATFORM_SIZE_TYPE} bits")

IF(K3D_PLATFORM_SIZE_TYPE EQUAL 32)
	SET(K3D_UINT_T_32_BITS 1)
ELSEIF(K3D_PLATFORM_SIZE_TYPE EQUAL 64)
	SET(K3D_UINT_T_64_BITS 1)
ELSE(K3D_PLATFORM_SIZE_TYPE EQUAL 32)
	MESSAGE(SEND_ERROR "Error detecting platform word-size.")
ENDIF(K3D_PLATFORM_SIZE_TYPE EQUAL 32)

# Setup high-level build options
IF(WIN32)
	SET(K3D_BOOL_DEFAULT OFF)
	SET(K3D_BUILD_OSX_MODULE_DEFAULT OFF)
	SET(K3D_GLX_DEFAULT OFF)
	SET(K3D_GNOME_DEFAULT OFF)
	SET(K3D_IMAGEMAGICK_DEFAULT OFF)
	SET(K3D_OFFSCREEN_DEFAULT ON)
	SET(K3D_WGL_DEFAULT ON)
	SET(K3D_WINDOWS_DEFAULT ON)
ENDIF(WIN32)

IF(UNIX AND NOT APPLE)
	SET(K3D_BOOL_DEFAULT OFF)
	SET(K3D_BUILD_OSX_MODULE_DEFAULT OFF)
	SET(K3D_GLX_DEFAULT ON)
	SET(K3D_GNOME_DEFAULT ON)
	SET(K3D_IMAGEMAGICK_DEFAULT ON)
	SET(K3D_OFFSCREEN_DEFAULT ON)
	SET(K3D_WGL_DEFAULT OFF)
	SET(K3D_WINDOWS_DEFAULT OFF)
ENDIF(UNIX AND NOT APPLE)

IF(APPLE)
	SET(K3D_BOOL_DEFAULT OFF)
	SET(K3D_BUILD_OSX_MODULE_DEFAULT ON)
	SET(K3D_GLX_DEFAULT OFF)
	SET(K3D_GNOME_DEFAULT OFF)
	SET(K3D_IMAGEMAGICK_DEFAULT OFF)
	SET(K3D_OFFSCREEN_DEFAULT OFF)
	SET(K3D_WGL_DEFAULT OFF)
	SET(K3D_WINDOWS_DEFAULT OFF)
ENDIF(APPLE)

OPTION(K3D_BUILD_ANIMATION_MODULE "Build the animation plugin module" ON)
OPTION(K3D_BUILD_ANNOTATION_MODULE "Build the annotation plugin module" ON)
OPTION(K3D_BUILD_AQSIS_MODULE "Build the Aqsis render engine integration plugin module" ON)
OPTION(K3D_BUILD_ARRAY_MODULE "Build the array plugin module" ON)
OPTION(K3D_BUILD_BILINEAR_PATCH_MODULE "Build the bilinear patch plugin module" ON)
OPTION(K3D_BUILD_BICUBIC_PATCH_MODULE "Build the bicubic patch plugin module" ON)
OPTION(K3D_BUILD_BITMAP_MODULE "Build the bitmap plugin module" ON)
OPTION(K3D_BUILD_BLOBBIES_MODULE "Build the blobby plugin module" ON)
OPTION(K3D_BUILD_BOOLEANS_MODULE "Build the booleans plugin module" ${K3D_BOOL_DEFAULT})
OPTION(K3D_BUILD_CORE_MODULE "Build the core plugin module" ON)
OPTION(K3D_BUILD_DEFORMATION_MODULE "Build the mesh deformation plugin module" ON)
OPTION(K3D_BUILD_DEVELOPMENT_MODULE "Build the development plugin module" ON)
OPTION(K3D_BUILD_FREETYPE2_MODULE "Build the freetype2 plugin module" ON)
OPTION(K3D_BUILD_GLX_MODULE "Build the GLX offscreen rendering module" ${K3D_GLX_DEFAULT})
OPTION(K3D_BUILD_GNOME_MODULE "Build the GNOME integration plugin module" ${K3D_GNOME_DEFAULT})
OPTION(K3D_BUILD_GRAPHVIZ_MODULE "Build the GraphViz integration plugin module" ON)
OPTION(K3D_BUILD_GTS_MODULE "Build the GNU Triangulated Surfaces plugin module" OFF)
OPTION(K3D_BUILD_GTS_IO_MODULE "Build the GNU Triangulated Surfaces file format module" ON)
OPTION(K3D_BUILD_IMAGEMAGICK_IO_MODULE "Build the ImageMagick file format module" ${K3D_IMAGEMAGICK_DEFAULT})
OPTION(K3D_BUILD_JPEG_IO_MODULE "Build the jpeg file format module" ON)
OPTION(K3D_BUILD_K3DSCRIPT_MODULE "Build the k3dscript scripting language module" ON)
OPTION(K3D_BUILD_K3D_IO_MODULE "Build the K-3D file format module" ON)
OPTION(K3D_BUILD_LINEAR_CURVE_MODULE "Build the linear curve plugin module" ON)
OPTION(K3D_BUILD_LSYSTEM_MODULE "Build the l-system parser module" ON)
OPTION(K3D_BUILD_MESH_ATTRIBUTES_MODULE "Build the mesh attributes plugin module" ON)
OPTION(K3D_BUILD_MESH_MODULE "Build the mesh plugin module" ON)
OPTION(K3D_BUILD_MESH_INSTANCE_MODULE "Build the mesh-instance plugin module" ON)
OPTION(K3D_BUILD_NGUI_MODULES "Build the standard graphical user interface plugin" ON)
OPTION(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE "Build the standard graphical user interface pipeline display plugin" OFF)
OPTION(K3D_BUILD_NLS "Build K-3D with native language support" ON)
OPTION(K3D_BUILD_NUI_MODULE "Build the Null User Interface module" ON)
OPTION(K3D_BUILD_NURBS_MODULE "Build the NURBS plugin module" ON)
OPTION(K3D_BUILD_OBJ_IO_MODULE "Build the Wavefront .obj file format module" ON)
OPTION(K3D_BUILD_OFFSCREEN_MODULE "Build the offscreen OpenGL rendering module" ${K3D_OFFSCREEN_DEFAULT})
OPTION(K3D_BUILD_OPENEXR_IO_MODULE "Build the OpenEXR file format module" OFF)
OPTION(K3D_BUILD_OPENGL_MODULE "Build the OpenGL integration module" ON)
OPTION(K3D_BUILD_OPENGL_PAINTERS_MODULE "Build the OpenGL mesh painters module" ON)
OPTION(K3D_BUILD_OSX_MODULE "Build the Mac OSX integration plugin module" ${K3D_BUILD_OSX_MODULE_DEFAULT})
OPTION(K3D_BUILD_PDIFF_MODULE "Build the perceptual-diff plugin module" ON)
OPTION(K3D_BUILD_PGP_REMESH_MODULE "Build the PGP remesh plugin module" ON)
OPTION(K3D_BUILD_PIXIE_MODULE "Build the Pixie render engine integration module" ON)
OPTION(K3D_BUILD_PLOT_MODULE "Build the function-plot module" ON)
OPTION(K3D_BUILD_PLY_IO_MODULE "Build the Stanford .ply file format module" ON)
OPTION(K3D_BUILD_PNG_IO_MODULE "Build the PNG file format module" ON)
OPTION(K3D_BUILD_POINT_GROUP_MODULE "Build the point group plugin module" ON)
OPTION(K3D_BUILD_POLYHEDRA_MODULE "Build the polyhedra plugin module" ON)
OPTION(K3D_BUILD_PRIMITIVES_MODULE "Build the polygonal primitives module" ON)
OPTION(K3D_BUILD_PYTHON_MODULES "Build Python-related modules" ON)
OPTION(K3D_BUILD_QSLIM_MODULE "Build the qslim module" ON)
OPTION(K3D_BUILD_QTUI_MODULE "Build the sample Qt graphical user interface plugin" OFF)
OPTION(K3D_BUILD_QUADRICS_MODULE "Build the quadrics module" ON)
OPTION(K3D_BUILD_RENDERMAN_MODULE "Build the RenderMan integration module" ON)
OPTION(K3D_BUILD_RENDERMAN_PAINTERS_MODULE "Build the RenderMan mesh painters module" ON)
OPTION(K3D_BUILD_SCALAR_MODULE "Build the scalar plugin module" ON)
OPTION(K3D_BUILD_SCRIPTING_MODULE "Build the scripting plugin module" ON)
OPTION(K3D_BUILD_SELECTION_MODULE "Build the selection plugin module" ON)
OPTION(K3D_BUILD_TEST_MODULE "Build the regression test plugin module" ON)
OPTION(K3D_BUILD_TEXTURE_MODULE "Build the texture plugin module" ON)
OPTION(K3D_BUILD_TIFF_IO_MODULE "Build the TIFF file format module" ON)
OPTION(K3D_BUILD_TIME_MODULE "Build the time source plugin module" ON)
OPTION(K3D_BUILD_VIRTUAL_OPENGL_PAINTERS_MODULE "Build virtual OpenGL painters modules" ON)
OPTION(K3D_BUILD_WGL_MODULE "Build the Windows offscreen rendering module" ${K3D_WGL_DEFAULT})
OPTION(K3D_BUILD_WINDOWS_MODULE "Build the Windows integration module" ${K3D_WINDOWS_DEFAULT})
OPTION(K3D_BUILD_YAFRAY_MODULE "Build the YAFRAY render engine integration module" ON)

OPTION(K3D_NEWTIMELINE "Use the new timeline module" OFF)

OPTION(K3D_SYMBOL_VISIBILITY "Minimize the number of symbols exported from shared libraries" OFF)
MARK_AS_ADVANCED(K3D_SYMBOL_VISIBILITY)
OPTION(K3D_TEST_VBO "Run tests using VBO painters" OFF)
MARK_AS_ADVANCED(K3D_TEST_VBO)

# Find required external packages
INCLUDE(K3DFindBoost)
IF(NOT K3D_BOOST_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the boost library")
ENDIF(NOT K3D_BOOST_FOUND)

INCLUDE(K3DFindGlibmm)
IF(NOT K3D_GLIBMM_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the glibmm library")
ENDIF(NOT K3D_GLIBMM_FOUND)

INCLUDE(K3DFindOpenGL)
IF(NOT K3D_OPENGL_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the OpenGL library")
ENDIF(NOT K3D_OPENGL_FOUND)
IF(NOT K3D_OPENGL_GLU_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the OpenGL GLU library")
ENDIF(NOT K3D_OPENGL_GLU_FOUND)

INCLUDE(K3DFindSigC)
IF(NOT K3D_SIGC_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the libsigc++ library")
ENDIF(NOT K3D_SIGC_FOUND)

INCLUDE(K3DFindXML)
IF(NOT K3D_XML_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find an XML parser library")
ENDIF(NOT K3D_XML_FOUND)

INCLUDE(K3DFindZlib)
IF(NOT K3D_ZLIB_FOUND)
	MESSAGE(SEND_ERROR "Couldn't find the zlib library")
ENDIF(NOT K3D_ZLIB_FOUND)

IF(NOT WIN32)
	INCLUDE(K3DFindUUID)
	IF(NOT K3D_UUID_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find uuid library")
	ENDIF(NOT K3D_UUID_FOUND)
ENDIF(NOT WIN32)

# Find optional external packages
IF(K3D_BUILD_BOOLEANS_MODULE)
	INCLUDE(K3DFindCGAL)
	IF(NOT K3D_CGAL_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the CGAL library, which is required by K3D_BUILD_BOOLEANS_MODULE")
	ENDIF(NOT K3D_CGAL_FOUND)
ENDIF(K3D_BUILD_BOOLEANS_MODULE)

IF(K3D_BUILD_FREETYPE2_MODULE)
	INCLUDE(K3DFindFreetype2)
	IF(NOT K3D_FREETYPE2_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the freetype2 library")
	ENDIF(NOT K3D_FREETYPE2_FOUND)
ENDIF(K3D_BUILD_FREETYPE2_MODULE)

IF(K3D_BUILD_GNOME_MODULE)
	INCLUDE(K3DFindGnome)
	IF(NOT K3D_GNOME_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the GNOME libraries")
	ENDIF(NOT K3D_GNOME_FOUND)
ENDIF(K3D_BUILD_GNOME_MODULE)

IF(K3D_BUILD_GTS_MODULE)
	INCLUDE(K3DFindGTS)
	IF(NOT K3D_GTS_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the GTS library")
	ENDIF(NOT K3D_GTS_FOUND)
ENDIF(K3D_BUILD_GTS_MODULE)

IF(K3D_BUILD_IMAGEMAGICK_IO_MODULE)
	INCLUDE(K3DFindImageMagick)
	IF(NOT K3D_IMAGEMAGICK_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the ImageMagick library")
	ENDIF(NOT K3D_IMAGEMAGICK_FOUND)
ENDIF(K3D_BUILD_IMAGEMAGICK_IO_MODULE)

IF(K3D_BUILD_JPEG_IO_MODULE)
	INCLUDE(K3DFindJPEG)
	IF(NOT K3D_JPEG_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the JPEG library")
	ENDIF(NOT K3D_JPEG_FOUND)
ENDIF(K3D_BUILD_JPEG_IO_MODULE)

IF(K3D_BUILD_NGUI_MODULES)
	INCLUDE(K3DFindGtkmm)
	IF(NOT K3D_GTKMM_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the gtkmm library")
	ENDIF(NOT K3D_GTKMM_FOUND)

	INCLUDE(K3DFindGtkGLExt)
	IF(NOT K3D_GTKGLEXT_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the gtkglext library")
	ENDIF(NOT K3D_GTKGLEXT_FOUND)
ENDIF(K3D_BUILD_NGUI_MODULES)

IF(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE)
	IF(NOT K3D_BUILD_NGUI_MODULES)
		MESSAGE(SEND_ERROR "K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE requires that K3D_BUILD_NGUI_MODULES be enabled.")
	ENDIF(NOT K3D_BUILD_NGUI_MODULES)

	INCLUDE(K3DFindCairomm)
	IF(NOT K3D_CAIROMM_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the cairomm library")
	ENDIF(NOT K3D_CAIROMM_FOUND)
ENDIF(K3D_BUILD_NGUI_PIPELINE_PANEL_MODULE)

IF(K3D_BUILD_NLS)
	INCLUDE(K3DFindIntl)
	IF(NOT K3D_INTL_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the intl library")
	ENDIF(NOT K3D_INTL_FOUND)
ENDIF(K3D_BUILD_NLS)

IF(K3D_BUILD_OPENEXR_IO_MODULE)
	INCLUDE(K3DFindOpenEXR)
	IF(NOT K3D_OPENEXR_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the OpenEXR library")
	ENDIF(NOT K3D_OPENEXR_FOUND)
ENDIF(K3D_BUILD_OPENEXR_IO_MODULE)

IF(K3D_BUILD_PNG_IO_MODULE)
	INCLUDE(K3DFindPNG)
	IF(NOT K3D_PNG_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the PNG library")
	ENDIF(NOT K3D_PNG_FOUND)
ENDIF(K3D_BUILD_PNG_IO_MODULE)

IF(K3D_BUILD_PYTHON_MODULES)
	INCLUDE(FindPythonLibs)
#	IF(NOT Python_FOUND)
#		MESSAGE(SEND_ERROR "Couldn't find the Python libraries")
#	ENDIF(NOT Python_FOUND)
	MARK_AS_ADVANCED(PYTHON_INCLUDE_PATH)
	MARK_AS_ADVANCED(PYTHON_LIBRARY)
	MARK_AS_ADVANCED(PYTHON_DEBUG_LIBRARY)
ENDIF(K3D_BUILD_PYTHON_MODULES)

IF(K3D_BUILD_QTUI_MODULE)
	INCLUDE(FindQt4)
	IF(NOT QT4_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the Qt4 library")
	ENDIF(NOT QT4_FOUND)

	MARK_AS_ADVANCED(QT_MKSPECS_DIR)
	MARK_AS_ADVANCED(QT_PLUGINS_DIR)
	MARK_AS_ADVANCED(QT_QMAKE_EXECUTABLE)
	MARK_AS_ADVANCED(QT_X11_X11_LIBRARY)
	MARK_AS_ADVANCED(QT_X11_Xext_LIBRARY)
	MARK_AS_ADVANCED(QT_X11_m_LIBRARY)
ENDIF(K3D_BUILD_QTUI_MODULE)

IF(K3D_BUILD_TIFF_IO_MODULE)
	INCLUDE(K3DFindTIFF)
	IF(NOT K3D_TIFF_FOUND)
		MESSAGE(SEND_ERROR "Couldn't find the TIFF library")
	ENDIF(NOT K3D_TIFF_FOUND)
ENDIF(K3D_BUILD_TIFF_IO_MODULE)

# Compiler configuration
IF(WIN32)
	IF(MSVC)
		SET(K3D_COMPILER_MSVC TRUE)
	ELSE(MSVC)
		SET(K3D_COMPILER_GCC TRUE)
	ENDIF(MSVC)
ELSE(WIN32)
	SET(K3D_COMPILER_GCC TRUE)
ENDIF(WIN32)

# Win32 API configuration
IF(WIN32)
	SET(K3D_API_WIN32 TRUE)
	IF(NOT MSVC)
		SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc -Wl,--export-all-symbols" CACHE STRING "" FORCE)
	ENDIF(NOT MSVC)
ENDIF(WIN32)

# Darwin API configuration
IF(APPLE)
	SET(K3D_API_DARWIN TRUE)
ENDIF(APPLE)

# Setup output directories ...
SET(EXECUTABLE_OUTPUT_PATH ${k3d_BINARY_DIR}/bin)

IF(WIN32)
	SET(LIBRARY_OUTPUT_PATH ${k3d_BINARY_DIR}/bin)
ELSE(WIN32)
	SET(LIBRARY_OUTPUT_PATH ${k3d_BINARY_DIR}/lib)
ENDIF(WIN32)

# Setup subdirectories ...
IF(MSVC)
	ADD_SUBDIRECTORY(gendef)
ENDIF(MSVC)

ADD_SUBDIRECTORY(types)
ADD_SUBDIRECTORY(k3dsdk)

ADD_SUBDIRECTORY(application)
ADD_SUBDIRECTORY(bug-buddy)
ADD_SUBDIRECTORY(make-module-proxy)
ADD_SUBDIRECTORY(renderjob)
ADD_SUBDIRECTORY(renderframe)
ADD_SUBDIRECTORY(sl2xml)
ADD_SUBDIRECTORY(uuidgen)
ADD_SUBDIRECTORY(uimodules)
ADD_SUBDIRECTORY(modules)
ADD_SUBDIRECTORY(share)
ADD_SUBDIRECTORY(tests)
ADD_SUBDIRECTORY(po)
ADD_SUBDIRECTORY(distribution)
ADD_SUBDIRECTORY(docs)
ADD_SUBDIRECTORY(man)

# Hide some cruft ...
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)

# Test to ensure that none of our filenames exceed 90 characters in length (causes portability issues with tar)
INCLUDE(K3DCheckFilenames)

