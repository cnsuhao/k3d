STRING(REPLACE "/" "\\\\" NATIVE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

SET(CPACK_GENERATOR "NSIS")
SET(CPACK_PACKAGE_ICON "${NATIVE_CURRENT_SOURCE_DIR}\\\\headerimage.bmp")
SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\k3d.exe")
SET(CPACK_NSIS_HELP_LINK "http://www.k-3d.org/wiki/Support")

INCLUDE(CPack)

#IF(K3D_BUILD_ALL_IN_ONE_PACKAGE)
#	SET(K3D_K3D_INSTALLER "k3d-setup-${VERSION}.exe")
##	SET(K3D_K3D_INSTALLER_DIR ${k3d_BINARY_DIR})
#
#	SET(K3D_AQSIS_INSTALLER "aqsis-setup-1.2.0.exe")
#	FIND_PATH(K3D_AQSIS_INSTALLER_DIR ${K3D_AQSIS_INSTALLER} DOC "Directory containing ${K3D_AQSIS_INSTALLER}")
#	MARK_AS_ADVANCED(K3D_AQSIS_INSTALLER_DIR)
#
#	SET(K3D_PYTHON_INSTALLER "python-2.4.4.msi")
#	FIND_PATH(K3D_PYTHON_INSTALLER_DIR ${K3D_PYTHON_INSTALLER} DOC "Directory containing ${K3D_PYTHON_INSTALLER}")
#	MARK_AS_ADVANCED(K3D_PYTHON_INSTALLER_DIR)
#
#	SET(K3D_PYGTK_INSTALLER "pygtk-2.10.4-1.win32-py2.4.exe")
#	FIND_PATH(K3D_PYGTK_INSTALLER_DIR ${K3D_PYGTK_INSTALLER} DOC "Directory containing ${K3D_PYGTK_INSTALLER}") 
#	MARK_AS_ADVANCED(K3D_PYGTK_INSTALLER_DIR)
#
#		SET(K3D_PYCAIRO_INSTALLER "pycairo-1.0.2-1.win32-py2.4.exe")
#		FIND_PATH(K3D_PYCAIRO_INSTALLER_DIR ${K3D_PYCAIRO_INSTALLER} DOC "Directory containing ${K3D_PYCAIRO_INSTALLER}")
#		MARK_AS_ADVANCED(K3D_PYCAIRO_INSTALLER_DIR)
#
#	SET(K3D_CGKIT_INSTALLER "cgkit-2.0.0alpha7.win32-py2.4.exe")
#	FIND_PATH(K3D_CGKIT_INSTALLER_DIR ${K3D_CGKIT_INSTALLER} DOC "Directory containing ${K3D_CGKIT_INSTALLER}")
#	MARK_AS_ADVANCED(K3D_CGKIT_INSTALLER_DIR)
#
#	SET(K3D_AQSIS_INSTALLER_PATH "${K3D_AQSIS_INSTALLER_DIR}/${K3D_AQSIS_INSTALLER}")
#	SET(K3D_PYTHON_INSTALLER_PATH "${K3D_PYTHON_INSTALLER_DIR}/${K3D_PYTHON_INSTALLER}")
#	SET(K3D_PYGTK_INSTALLER_PATH "${K3D_PYGTK_INSTALLER_DIR}/${K3D_PYGTK_INSTALLER}")
##		SET(K3D_PYCAIRO_INSTALLER_PATH "${K3D_PYCAIRO_INSTALLER_DIR}/${K3D_PYCAIRO_INSTALLER}")
#	SET(K3D_CGKIT_INSTALLER_PATH "${K3D_CGKIT_INSTALLER_DIR}/${K3D_CGKIT_INSTALLER}")
#
#	IF(NOT EXISTS "${K3D_AQSIS_INSTALLER_PATH}")
#		MESSAGE(SEND_ERROR "Couldn't locate ${K3D_AQSIS_INSTALLER_PATH}")
#	ENDIF(NOT EXISTS "${K3D_AQSIS_INSTALLER_PATH}")
#
##	IF(NOT EXISTS "${K3D_PYTHON_INSTALLER_PATH}")
#		MESSAGE(SEND_ERROR "Couldn't locate ${K3D_PYTHON_INSTALLER_PATH}")
#	ENDIF(NOT EXISTS "${K3D_PYTHON_INSTALLER_PATH}")
#
#	IF(NOT EXISTS "${K3D_PYGTK_INSTALLER_PATH}")
#		MESSAGE(SEND_ERROR "Couldn't locate ${K3D_PYGTK_INSTALLER_PATH}")
#	ENDIF(NOT EXISTS "${K3D_PYGTK_INSTALLER_PATH}")
#
##		IF(NOT EXISTS "${K3D_PYCAIRO_INSTALLER_PATH}")
#			MESSAGE(SEND_ERROR "Couldn't locate ${K3D_PYCAIRO_INSTALLER_PATH}")
#		ENDIF(NOT EXISTS "${K3D_PYCAIRO_INSTALLER_PATH}")
#
#	IF(NOT EXISTS "${K3D_CGKIT_INSTALLER_PATH}")
#		MESSAGE(SEND_ERROR "Couldn't locate ${K3D_CGKIT_INSTALLER_PATH}")
#	ENDIF(NOT EXISTS "${K3D_CGKIT_INSTALLER_PATH}")
##
#	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/all-in-one.nsi.in ${CMAKE_CURRENT_BINARY_DIR}/all-in-one.nsi @ONLY)
#
#	ADD_CUSTOM_TARGET(package-all-in-one
#		COMMAND makensis ${CMAKE_CURRENT_BINARY_DIR}/all-in-one.nsi
#		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
#		)
#
#ENDIF(K3D_BUILD_ALL_IN_ONE_PACKAGE)

