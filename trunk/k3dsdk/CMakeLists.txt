PROJECT(k3dsdk)

FILE(GLOB HEADERS *.h)
FILE(GLOB SOURCES *.cpp)

IF(CMAKE_HAS_SORT)
	LIST(SORT HEADERS)
	LIST(SORT SOURCES)
ENDIF(CMAKE_HAS_SORT)

IF(WIN32 AND K3D_COMPILER_GCC)
	# For some reason, serialization_xml.cpp takes *forever* to build with optimizations enabled
	SET_SOURCE_FILES_PROPERTIES(serialization_xml.cpp PROPERTIES COMPILE_FLAGS -O0)
ENDIF(WIN32 AND K3D_COMPILER_GCC)

CONFIGURE_FILE(${k3dsdk_SOURCE_DIR}/k3d-i18n-config.h.in ${k3dsdk_BINARY_DIR}/k3d-i18n-config.h)
CONFIGURE_FILE(${k3dsdk_SOURCE_DIR}/k3d-module-config.h.in ${k3dsdk_BINARY_DIR}/k3d-module-config.h)
CONFIGURE_FILE(${k3dsdk_SOURCE_DIR}/k3d-parallel-config.h.in ${k3dsdk_BINARY_DIR}/k3d-parallel-config.h)
CONFIGURE_FILE(${k3dsdk_SOURCE_DIR}/k3d-platform-config.h.in ${k3dsdk_BINARY_DIR}/k3d-platform-config.h)
CONFIGURE_FILE(${k3dsdk_SOURCE_DIR}/k3d-version-config.h.in ${k3dsdk_BINARY_DIR}/k3d-version-config.h)

INCLUDE_DIRECTORIES(${k3d_SOURCE_DIR})
INCLUDE_DIRECTORIES(${k3dsdk_SOURCE_DIR}/gil)
INCLUDE_DIRECTORIES(${k3dsdk_BINARY_DIR})
INCLUDE_DIRECTORIES(${K3D_BOOST_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${K3D_GLIBMM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${K3D_SIGC_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${K3D_OPENGL_INCLUDE_DIR})

IF(NOT WIN32)
	INCLUDE_DIRECTORIES(${K3D_UUID_INCLUDE_DIRS})
ENDIF(NOT WIN32)

INCLUDE_DIRECTORIES(${K3D_XML_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${K3D_ZLIB_INCLUDE_DIR})

LINK_DIRECTORIES(${K3D_BOOST_LIB_DIRS})
LINK_DIRECTORIES(${K3D_GLIBMM_LIB_DIRS})
LINK_DIRECTORIES(${K3D_SIGC_LIB_DIRS})

IF(NOT WIN32)
	LINK_DIRECTORIES(${K3D_UUID_LIB_DIRS})
ENDIF(NOT WIN32)

ADD_LIBRARY(k3dsdk SHARED ${HEADERS} ${SOURCES})
K3D_GENERATE_DEF_FILE(k3dsdk)
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_GLIBMM_LIBS})
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_SIGC_LIBS})
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_XML_LIB})
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_ZLIB_LIB})
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_OPENGL_GL_LIBRARY})
TARGET_LINK_LIBRARIES(k3dsdk ${K3D_OPENGL_GLU_LIBRARY})
TARGET_LINK_LIBRARIES(k3dsdk k3dsdk-half)
TARGET_LINK_LIBRARIES(k3dsdk k3dsdk-sgi-tesselator)
TARGET_LINK_LIBRARIES(k3dsdk k3dsdk-glew)
TARGET_LINK_LIBRARIES(k3dsdk k3dsdk-parallel)

IF(NOT WIN32)
	TARGET_LINK_LIBRARIES(k3dsdk ${K3D_UUID_LIBS})
ENDIF(NOT WIN32)

IF(K3D_BUILD_NLS)
	INCLUDE_DIRECTORIES(${K3D_INTL_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(k3dsdk ${K3D_INTL_LIBS})
ENDIF(K3D_BUILD_NLS)

IF(WIN32)
	TARGET_LINK_LIBRARIES(k3dsdk ole32)
	TARGET_LINK_LIBRARIES(k3dsdk ws2_32)
ENDIF(WIN32)

ADD_SUBDIRECTORY(Half)
ADD_SUBDIRECTORY(expression)
ADD_SUBDIRECTORY(glew)
ADD_SUBDIRECTORY(parallel)
ADD_SUBDIRECTORY(sgi_tesselator)
ADD_SUBDIRECTORY(subdivision_surface)
ADD_SUBDIRECTORY(surface_polygonizer)

IF(K3D_BUILD_NGUI_MODULE)
	ADD_SUBDIRECTORY(ngui)
ENDIF(K3D_BUILD_NGUI_MODULE)

IF(K3D_BUILD_PYTHON_MODULE OR K3D_BUILD_PYUI_MODULE)
	ADD_SUBDIRECTORY(python)
ENDIF(K3D_BUILD_PYTHON_MODULE OR K3D_BUILD_PYUI_MODULE)

IF(BUILD_TESTING)
	ADD_SUBDIRECTORY(tests)
ENDIF(BUILD_TESTING)

INSTALL(TARGETS k3dsdk
	RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
	ARCHIVE DESTINATION lib)
INSTALL(FILES ${HEADERS} DESTINATION include/k3d/k3dsdk)

INSTALL(FILES ${k3dsdk_BINARY_DIR}/k3d-i18n-config.h DESTINATION lib/k3d/include)
INSTALL(FILES ${k3dsdk_BINARY_DIR}/k3d-module-config.h DESTINATION lib/k3d/include)
INSTALL(FILES ${k3dsdk_BINARY_DIR}/k3d-platform-config.h DESTINATION lib/k3d/include)
INSTALL(FILES ${k3dsdk_BINARY_DIR}/k3d-version-config.h DESTINATION lib/k3d/include)

